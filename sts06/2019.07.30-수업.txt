스프링이 2.5부터 주목 받기 시작함 
	갱신 안되고, 문제 해결 잘 안되고, 세팅부터가 힘든 상태

스프링 3.x 부터 활성화
	4.x보다 에러도 적어서 사용 되었음 

-환경설정
	open perspective를 spring으로 변경
	new > spring legecy proj > spring MVC proj >(가장 낮은 spring 3.1이 다운 됨)

	기본 세팅이 다 되어 있는 상태
		main/resources/log4j.xml로 등록되어 있음
		각 레벨에 따른 정의와 표현방법이 정해져 있음

		web.xml에는 
		contextConfigLocationdl 우선순위 1로
		servlet mapping은 /로

		servlet-context.xml에는 
		org.springframework.web.servlet.view.InternalResourceViewResolver가 이전 처럼 정의 되어 있음
		bean의 형태가 다름
			xmlns:beans="http://www.springframework.org/schema/beans" 가 추가 되어서 prefix로 beans로 스키마가 바뀜
		
		controller에 보면
		어노테이션으로 controller가 정의됨. 이를 작동 시키는 것이 servlet-context.xml에 annotation-driven
	
-어노테이션
	xml을 통하지 않고 java 코드를 통해서 페이지 설정(xml은 문서의 갱신이 잘 안됨)
	pojo지향 하기 때문에 강제로 특정 클래스를 상속하지 않아도 됨 
	>위 2가지 처리 때문에 문법의 자유도가 높고 ,편리함, 낮은 에러 확율  > spring이 부흥 할 수 있었던 이유
		(4.x에서는 너무 많아진 어노테이션에 대한 반발로 최소한의 어노테이션을 사용하고 나머지는 java로 처리하기 됨)

	controller annotation depth
		com.bit.day05(프로젝트 만들때 패키지 경로) 하위에서 만든 controller만 작동한다. ex03(o) , ex04(x)
		왜? servlet-context.xml에 annotation-driven가 위 내용을 작동 시킨다. 
		왜? <context:component-scan base-package="com.bit.day05" /> 가 컴포넌트를 스캔하면서 작동
			왜? Controller가 component annotaion을 상속 받기 때문에 component annotaion을 상속받는 내용을 스캔

	request mapping
		아래 들어오는 url내용을 매핑
		/(루트)에서 부터 
		xml에서 했던것과 동일하기 때문에 잘못 설정하면 xml 오류 때와 동일하게 나타남 
		위치 : class 또는 method - 메서드에는 필수(메서드가 2개 이상일 때 매핑을 할 수 없기 때문에)
			class에 붙으면 namespace의 역할을 하게 됨
		class에도 붙일 수 있게 만든 이유
			하나의 클래스 안에 여러개의 주소 매핑을 가능하게 하기 위해서
		value와 method를 통해서 호출 방식에 따른 매핑 가능하게 함
		void로 해도 view 가 결정 됨 > method 명 x , RequestMapping의 value의 값(주소)에 의해서 결정
		확장명이 같이 들어오면 이를 제외하고 매핑함

	뷰의 결정방법
		mav 
		string
		void
		직접 뷰 랜더링

	값 전달 방법
		req.setAttr( , )
		mav.addObj( , )


	파라미터
		넘어오는 값을 바로 인자로 받는다.
		형 변환도 알아서 해줌
		이름이 같으면 생략 가능 ("~~") 또는 어노테이션 자체도 생략 가능

		path경로에서 뽑아오기 @PathVariable
			restfull에서 사용 -> 의미를 담는 주소
			PathVariable은 생략 불가능(생략하면 주소 접근과 구분 불가이기 때문에)
			PathVariable의 인자값(value)는 생략 가능

	@ModelAttribute
		bean객체를 field로 주입
		modelAttr로 값 실어 나르기
		넘어온 param의 이름 setter를 호출 할 수 있도록 이름이 Vo의 field명과 동일해야함
		vo의 이름이 @ModelAttribute의 이름과 같다면 vo의 이름을 생략 가능
		param을 받지 않은 경우는
		메서드 안에서도 주입이 가능은 하다.

	3.x의 문법은 끝
	4.x에서 어노테이션이 많이 늘어남 


	@어노테인션 책 표 5-1 참고
	
	@Autowired (spring 2.5 부터)
		가장 유사한 객체를 연결시켜줌 
		위치 : setter 메서드 위 또는 객체 선언 위 
		속성(제약) : required = true 가능하면 한다 , false이면 이면 필수
		type일치를 통해 찾아 낸다.(이름과 상관 무) > 원하지 않은 객체가 붙을 수 있다.(상속 관계로 인한 가능성 있)
		
	@Qualifier
		객체의 이름을 통해서 의존 주입

	@inject
		@Autowired와 동일한 기능
		외부 lib으로 가져와서 사용(dependency)
		목적 : 스프링이 아니여도 사용 가능하게

	@Resource
		최근에 많이 씀(성능면에서 좋음)
		@Autowired와 흡사하지만 @Autowired는 타입으로(by type), @Resource는 이름으로(by name)으로 연결
	

	@Component를 통한 dao 주입
		Day02DaoImpl가 더 늦게 생성되면  Controller의 dao에 null이 들어가게 된다.
		>우선순위(순서가 필요) > @Repository를 통해 생성
		component-scan을 통해서 컴포넌트를 bean으로 객체 생성시킴 
		다 컴포넌트일때 어떤 객체를 우선적으로 할지를 지정 하기 위한 어노테이션들이 있음

	@Repository는 conponent를 상속 

	컴포넌트  스캔
		servlet-context에서  사용할 객체들을 bean 등록하지 않고 자동으로 생성시켜준다.
		base-package로 시작하는 클래스 중 @Component가 설정된 클래스를 자동으로 객체 생성한다.
			(Controller, Service, Repository가 Component를 상속)

-resources
	spring에서 css,js,image 등의 자원은 파일이 존재하는 url 그 자체로 사용된다.
	따라서 url 요청을 하는 이를 DispatcherServlet이 판단해 Controller에서 RequestMapping을 검생하는데 에러가 난다.
	> 정적인 자원에 url을 따로 주어야 하는데 이것이 mvc:resources 
	이 태그를 sevlet-context.xml에 지정 해줘야 한다.
	(내가 모르면 모든 가능성을 열어두고 생각하고 이야기를 받아들이자)


===================
내일은 
restfull 방식을 통해서 +
DB는 H2 DB - 개발자가 test용으로 자주 사용

